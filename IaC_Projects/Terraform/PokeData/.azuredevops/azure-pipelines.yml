# Azure DevOps CI/CD Pipeline for PokeData Infrastructure
# This pipeline demonstrates enterprise-grade DevOps practices for Terraform deployments

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - IaC_Projects/Terraform/PokeData/**
    exclude:
      - IaC_Projects/Terraform/PokeData/memory-bank/**
      - IaC_Projects/Terraform/PokeData/**/*.md

pr:
  branches:
    include:
      - main
  paths:
    include:
      - IaC_Projects/Terraform/PokeData/**
    exclude:
      - IaC_Projects/Terraform/PokeData/memory-bank/**
      - IaC_Projects/Terraform/PokeData/**/*.md

variables:
  - group: terraform-common
  - group: terraform-dev
  - name: terraformVersion
    value: '1.9.0'
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/IaC_Projects/Terraform/PokeData/environments/dev'
  - name: artifactName
    value: 'terraform-plan'
  - name: environment
    value: 'dev'
  - name: azureServiceConnection
    value: 'ARM Service Connection - Thunderdome'
  - name: githubServiceConnection
    value: 'PokeData Repo Service Connection'

resources:
  repositories:
    - repository: pokedata_app
      type: github
      name: Abernaughty/PokeData
      endpoint: "PokeData Repo Service Connection"

pool:
  name: Default
  # vmImage: 'ubuntu-latest'

stages:
  # Stage 1: Validation and Security Scanning
  - stage: Validate
    displayName: 'Validate & Scan'
    jobs:
      - job: ValidateTerraform
        displayName: 'Validate Terraform Configuration'
        steps:
          - template: templates/jobs/terraform-validate.yml
            parameters:
              workingDirectory: $(workingDirectory)
              terraformVersion: $(terraformVersion)

      - job: SecurityScan
        displayName: 'Security Scanning'
        dependsOn: ValidateTerraform
        steps:
          - template: templates/jobs/security-scan.yml
            parameters:
              workingDirectory: $(workingDirectory)

  # Stage 2: Build Application
  - stage: BuildApp
    displayName: 'Build Function App'
    jobs:
      - job: Build
        displayName: 'Build Node.js Function App'
        steps:
          # Enhanced checkout with explicit configuration
          - checkout: self
            displayName: 'Checkout Portfolio repository'
            clean: true
            fetchDepth: 1
          
          - checkout: pokedata_app
            displayName: 'Checkout PokeData repository'
            clean: true
            fetchDepth: 1
            path: 'pokedata_app'
          
          # Comprehensive repository verification
          - task: PowerShell@2
            displayName: 'Comprehensive Repository Verification'
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                Write-Host "=== COMPREHENSIVE REPOSITORY CHECKOUT VERIFICATION ===" -ForegroundColor Cyan
                Write-Host ""
                
                # Environment variables
                Write-Host "=== Environment Variables ===" -ForegroundColor Yellow
                Write-Host "Build.SourcesDirectory: $env:BUILD_SOURCESDIRECTORY"
                Write-Host "Agent.BuildDirectory: $env:AGENT_BUILDDIRECTORY"
                Write-Host "System.DefaultWorkingDirectory: $env:SYSTEM_DEFAULTWORKINGDIRECTORY"
                Write-Host ""
                
                # Check main sources directory
                Write-Host "=== Main Sources Directory Contents ===" -ForegroundColor Yellow
                if (Test-Path $env:BUILD_SOURCESDIRECTORY) {
                    Get-ChildItem $env:BUILD_SOURCESDIRECTORY -Force | Format-Table Name, Mode, Length, LastWriteTime
                } else {
                    Write-Host "ERROR: BUILD_SOURCESDIRECTORY does not exist!" -ForegroundColor Red
                    exit 1
                }
                Write-Host ""
                
                # Check for pokedata_app directory
                $pokeDataPath = Join-Path $env:BUILD_SOURCESDIRECTORY "pokedata_app"
                Write-Host "=== Checking PokeData Repository ===" -ForegroundColor Yellow
                Write-Host "Expected path: $pokeDataPath"
                
                if (Test-Path $pokeDataPath) {
                    Write-Host "SUCCESS: pokedata_app directory found!" -ForegroundColor Green
                    Write-Host "Contents of pokedata_app:"
                    Get-ChildItem $pokeDataPath -Force | Format-Table Name, Mode, Length, LastWriteTime
                } else {
                    Write-Host "ERROR: pokedata_app directory not found!" -ForegroundColor Red
                    Write-Host "This indicates the external repository checkout failed."
                    Write-Host ""
                    Write-Host "Troubleshooting information:" -ForegroundColor Yellow
                    Write-Host "1. Service connection permissions"
                    Write-Host "2. Repository access rights"
                    Write-Host "3. Agent configuration"
                    exit 1
                }
                Write-Host ""
                
                # Check for PokeDataFunc directory
                $funcPath = Join-Path $pokeDataPath "PokeDataFunc"
                Write-Host "=== Checking Function App Directory ===" -ForegroundColor Yellow
                Write-Host "Expected path: $funcPath"
                
                if (Test-Path $funcPath) {
                    Write-Host "SUCCESS: PokeDataFunc directory found!" -ForegroundColor Green
                    Write-Host "Contents of PokeDataFunc:"
                    Get-ChildItem $funcPath -Force | Format-Table Name, Mode, Length, LastWriteTime
                    
                    # Check for package.json and pnpm-lock.yaml
                    $packageJson = Join-Path $funcPath "package.json"
                    $pnpmLock = Join-Path $funcPath "pnpm-lock.yaml"
                    
                    if (Test-Path $packageJson) {
                        Write-Host "✓ package.json found" -ForegroundColor Green
                    } else {
                        Write-Host "✗ package.json NOT found" -ForegroundColor Red
                    }
                    
                    if (Test-Path $pnpmLock) {
                        Write-Host "✓ pnpm-lock.yaml found" -ForegroundColor Green
                    } else {
                        Write-Host "✗ pnpm-lock.yaml NOT found" -ForegroundColor Red
                    }
                } else {
                    Write-Host "ERROR: PokeDataFunc directory not found!" -ForegroundColor Red
                    Write-Host "The repository was checked out but doesn't contain the expected structure."
                    exit 1
                }
                
                Write-Host ""
                Write-Host "=== VERIFICATION COMPLETE - ALL CHECKS PASSED ===" -ForegroundColor Green
          
          - task: NodeTool@0
            displayName: 'Use Node.js 18.x'
            inputs:
              versionSpec: '18.x'
          
          - task: PowerShell@2
            displayName: 'Install pnpm'
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                Write-Host "Installing pnpm globally..." -ForegroundColor Yellow
                npm install -g pnpm
                Write-Host "pnpm version: $(pnpm --version)" -ForegroundColor Green
          
          - task: PowerShell@2
            displayName: 'Install dependencies and build'
            inputs:
              targetType: 'inline'
              pwsh: true
              workingDirectory: '$(Build.SourcesDirectory)/pokedata_app/PokeDataFunc'
              script: |
                Write-Host "=== Installing dependencies with pnpm ===" -ForegroundColor Yellow
                pnpm install
                
                Write-Host "=== Building with pnpm ===" -ForegroundColor Yellow
                pnpm run build
                
                Write-Host "=== Build completed successfully ===" -ForegroundColor Green
          
          - task: ArchiveFiles@2
            displayName: 'Archive function app files'
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/pokedata_app/PokeDataFunc'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/PokeDataFunc.zip'
              replaceExistingArchive: true
              exclude: |
                **/node_modules/**
                **/.vscode/**
                .env
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Function App artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)/PokeDataFunc.zip'
              ArtifactName: 'functionapp'

  # Stage 3: Plan
  - stage: Plan
    displayName: 'Terraform Plan'
    dependsOn: Validate
    condition: succeeded()
    jobs:
      - job: TerraformPlan
        displayName: 'Generate Terraform Plan'
        steps:
          - template: templates/jobs/terraform-plan.yml
            parameters:
              workingDirectory: $(workingDirectory)
              terraformVersion: $(terraformVersion)
              environment: $(environment)
              artifactName: $(artifactName)

  # Stage 4: Deploy (Only on main branch)
  - stage: Deploy
    displayName: 'Deploy to Dev'
    dependsOn: 
      - Plan
      - BuildApp
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - deployment: DeployDev
        displayName: 'Deploy Infrastructure to Dev'
        environment: 'dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - template: templates/jobs/terraform-apply.yml
                  parameters:
                    workingDirectory: $(workingDirectory)
                    terraformVersion: $(terraformVersion)
                    environment: $(environment)
                    artifactName: $(artifactName)
      - deployment: DeployApp
        displayName: 'Deploy Function App to Dev'
        environment: 'dev'
        dependsOn: DeployDev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadBuildArtifacts@1
                  displayName: 'Download Function App artifact'
                  inputs:
                    buildType: 'current'
                    downloadType: 'single'
                    artifactName: 'functionapp'
                    downloadPath: '$(System.ArtifactsDirectory)'
                - task: AzureFunctionApp@2
                  displayName: 'Deploy Function App'
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    appName: 'pokedata-func-$(environment)'
                    package: '$(System.ArtifactsDirectory)/functionapp/PokeDataFunc.zip'
                    appSettings: '-COSMOS_DB_CONNECTION_STRING $(COSMOS_DB_CONNECTION_STRING)'


  # Stage 5: Post-Deployment Tests
  - stage: Test
    displayName: 'Post-Deployment Tests'
    dependsOn: Deploy
    condition: succeeded()
    jobs:
      - job: InfrastructureTests
        displayName: 'Run Infrastructure Tests'
        steps:
          - template: templates/jobs/infrastructure-tests.yml
            parameters:
              environment: $(environment)

  - stage: Notify
    displayName: Send Notifications
    condition: always()
    jobs:
    - job: SendZohoMail
      displayName: Send status via Zoho SMTP
      steps:
      - task: PowerShell@2
        displayName: 'Send Pipeline Status Email (Zoho)'
        inputs:
          targetType: 'inline'
          pwsh: true
          script: |
            $fromAddr = 'devops@maber.io'
            $fromName = 'PokeData CI'
            $to       = 'mike@maber.io'

            $smtpHost = 'smtp.zoho.com'    # change to smtp.zoho.eu if needed
            $smtpUser = 'devops@maber.io'
            $smtpPass = $env:ZOHO_SMTP_PASSWORD
            if ([string]::IsNullOrWhiteSpace($smtpPass)) { throw 'ZOHO_SMTP_PASSWORD is empty/unavailable' }

            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

            $lines = @(
              "<b>Pipeline Status:</b> $(Agent.JobStatus)<br/>"
              "<b>Environment:</b> $(environment)<br/>"
              "<b>Build Number:</b> $(Build.BuildNumber)<br/>"
              "<b>Commit:</b> $(Build.SourceVersion)<br/>"
              "<b>Triggered By:</b> $(Build.RequestedFor)<br/>"
              "<br/>"
              "<a href='$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)'>View Pipeline</a>"
            )
            $body = ($lines -join "`n")

            $msg = [System.Net.Mail.MailMessage]::new()
            $msg.From = [System.Net.Mail.MailAddress]::new($fromAddr, $fromName)
            $msg.To.Add($to)
            $msg.Subject = "PokeData Pipeline - $(environment) - $(Build.SourceBranchName) - $(Agent.JobStatus)"
            $msg.Body = $body
            $msg.IsBodyHtml = $true

            $client = [System.Net.Mail.SmtpClient]::new($smtpHost, 587)  # STARTTLS
            $client.DeliveryMethod = [System.Net.Mail.SmtpDeliveryMethod]::Network
            $client.UseDefaultCredentials = $false
            $client.EnableSsl = $true
            $client.Credentials = [System.Net.NetworkCredential]::new($smtpUser, $smtpPass)

            $client.Send($msg)
            Write-Host ("Mail sent via {0}:{1}" -f $smtpHost, 587)

            $client.Dispose()
            $msg.Dispose()
        env:
          ZOHO_SMTP_PASSWORD: $(ZOHO_SMTP_PASSWORD)   # your Library/variable name

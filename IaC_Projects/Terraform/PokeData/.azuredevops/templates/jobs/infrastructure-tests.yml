# Template for Post-Deployment Infrastructure Tests (PowerShell)
parameters:
  - name: environment
    type: string

steps:
  - task: AzureCLI@2
    displayName: 'Verify Resource Group'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Verifying Resource Group Deployment"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"

        $exists = az group exists --name $RG_NAME | ForEach-Object { $_.Trim().ToLower() }
        if ($LASTEXITCODE -ne 0) { throw "az group exists failed." }
        if ($exists -ne 'true') { throw "Resource Group '$RG_NAME' not found." }

        Write-Host "✅ Resource Group '$RG_NAME' exists"
        Write-Host ""
        Write-Host "### Resources in Resource Group:"
        az resource list --resource-group $RG_NAME --output table

  - task: AzureCLI@2
    displayName: 'Test Cosmos DB Connectivity'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing Cosmos DB"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $COSMOS_NAME = "pokedata-cosmos-${{ parameters.environment }}"

        az cosmosdb show --name $COSMOS_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Cosmos DB '$COSMOS_NAME' not found in RG '$RG_NAME'." }
        Write-Host "✅ Cosmos DB '$COSMOS_NAME' exists"

        $ENDPOINT = (az cosmosdb show --name $COSMOS_NAME --resource-group $RG_NAME --query documentEndpoint -o tsv).Trim()
        Write-Host "Endpoint: $ENDPOINT"

        az cosmosdb sql database show --account-name $COSMOS_NAME --name "PokemonCards" --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Database 'PokemonCards' exists"
        } else {
          Write-Host "⚠️ Database 'PokemonCards' not found"
        }

  - task: AzureCLI@2
    displayName: 'Test Function App Infrastructure'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing Function App Infrastructure"

        $RG_NAME  = "pokedata-${{ parameters.environment }}-rg"
        $FUNC_NAME = "pokedata-func-${{ parameters.environment }}"

        az functionapp show --name $FUNC_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Function App '$FUNC_NAME' not found." }
        Write-Host "✅ Function App '$FUNC_NAME' exists"

        $funcHost = (az functionapp show --name $FUNC_NAME --resource-group $RG_NAME --query defaultHostName -o tsv).Trim()
        Write-Host "URL: https://$funcHost"

        $state = (az functionapp show --name $FUNC_NAME --resource-group $RG_NAME --query state -o tsv).Trim()
        if ($state -eq 'Running') { Write-Host "✅ Function App is running" } else { Write-Host "⚠️ Function App state: $state" }

        # Check critical app settings
        Write-Host ""
        Write-Host "### Verifying Critical App Settings"
        $appSettings = az functionapp config appsettings list --name $FUNC_NAME --resource-group $RG_NAME | ConvertFrom-Json
        
        $requiredSettings = @(
          'AzureWebJobsFeatureFlags',
          'FUNCTIONS_WORKER_RUNTIME',
          'WEBSITE_RUN_FROM_PACKAGE',
          'WEBSITE_NODE_DEFAULT_VERSION',
          'COSMOS_DB_CONNECTION_STRING',
          'POKEMON_TCG_API_KEY',
          'POKEMON_TCG_API_BASE_URL',
          'POKEDATA_API_KEY',
          'POKEDATA_API_BASE_URL',
          'ENABLE_REDIS_CACHE',
          'CACHE_TTL_SETS'
        )
        
        foreach ($setting in $requiredSettings) {
          $found = $appSettings | Where-Object { $_.name -eq $setting }
          if ($found) {
            Write-Host "✅ $setting = $($found.value)"
          } else {
            Write-Host "❌ Missing required setting: $setting"
          }
        }

        # Check function list
        Write-Host ""
        Write-Host "### Checking Deployed Functions"
        try {
          $functions = az functionapp function list --name $FUNC_NAME --resource-group $RG_NAME | ConvertFrom-Json
          if ($functions.Count -gt 0) {
            Write-Host "✅ Found $($functions.Count) deployed functions:"
            foreach ($func in $functions) {
              Write-Host "  - $($func.name) ($($func.config.bindings[0].type))"
            }
          } else {
            Write-Host "⚠️ No functions found - this may indicate deployment issues"
          }
        } catch {
          Write-Host "⚠️ Could not retrieve function list: $($_.Exception.Message)"
        }

  - task: AzureCLI@2
    displayName: 'Test Function API Endpoints'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Continue'  # Continue on errors to test all endpoints
        Write-Host "## Testing Function API Endpoints"
        
        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $FUNC_NAME = "pokedata-func-${{ parameters.environment }}"
        
        # Get function app hostname
        $funcHost = (az functionapp show --name $FUNC_NAME --resource-group $RG_NAME --query defaultHostName -o tsv).Trim()
        $baseUrl = "https://$funcHost"
        
        Write-Host "Base URL: $baseUrl"
        Write-Host ""
        
        # Test endpoints with retry logic
        function Test-Endpoint {
          param(
            [string]$Url,
            [string]$Description,
            [int[]]$ExpectedStatus = @(200),
            [int]$MaxRetries = 3,
            [int]$RetryDelay = 5
          )
          
          Write-Host "### Testing: $Description"
          Write-Host "URL: $Url"
          
          for ($i = 1; $i -le $MaxRetries; $i++) {
            try {
              $response = Invoke-WebRequest -Uri $Url -Method GET -TimeoutSec 30 -UseBasicParsing -SkipHttpErrorCheck
              $statusCode = [int]$response.StatusCode
              
              if ($ExpectedStatus -contains $statusCode) {
                Write-Host "✅ SUCCESS: HTTP $statusCode"
                if ($response.Content.Length -gt 0) {
                  $contentPreview = $response.Content.Substring(0, [Math]::Min(200, $response.Content.Length))
                  Write-Host "Response preview: $contentPreview..."
                }
                return $true
              } else {
                Write-Host "⚠️ Unexpected status: HTTP $statusCode (expected one of: $($ExpectedStatus -join ', '))"
                return $false
              }
            } catch {
              Write-Host "❌ Attempt $i failed: $($_.Exception.Message)"
              if ($i -lt $MaxRetries) {
                Write-Host "Retrying in $RetryDelay seconds..."
                Start-Sleep -Seconds $RetryDelay
              }
            }
          }
          
          Write-Host "❌ FAILED after $MaxRetries attempts"
          return $false
        }
        
        # Test suite
        $testResults = @()
        
        # 1. Test root endpoint 
        $testResults += Test-Endpoint -Url "$baseUrl/" -Description "Root endpoint" -ExpectedStatus @(200)
        
        # 2. Test health endpoint (accept 200 if implemented, 404 if not)
        $testResults += Test-Endpoint -Url "$baseUrl/api/health" -Description "Health check endpoint" -ExpectedStatus @(200, 404)
        
        # 3. Test Pokemon card sets endpoint (401 means authentication is working correctly)
        $testResults += Test-Endpoint -Url "$baseUrl/api/sets" -Description "Get Pokemon card sets (401 = auth working)" -ExpectedStatus @(200, 401)
        
        # 4. Test cards in set endpoint (401 means authentication is working correctly)
        $testResults += Test-Endpoint -Url "$baseUrl/api/sets/557/cards" -Description "Get cards in set (401 = auth working)" -ExpectedStatus @(200, 401)

        # 5. Test specific card endpoint (401 means authentication is working correctly)
        $testResults += Test-Endpoint -Url "$baseUrl/api/sets/557/cards/73121" -Description "Get specific card (401 = auth working)" -ExpectedStatus @(200, 401)

        # Summary
        Write-Host ""
        Write-Host "## API Endpoint Test Summary"
        $successCount = ($testResults | Where-Object { $_ -eq $true }).Count
        $totalCount = $testResults.Count
        
        Write-Host "Successful tests: $successCount/$totalCount"
        
        if ($successCount -eq $totalCount) {
          Write-Host "✅ All API endpoints are responding correctly"
          Write-Host "✅ Infrastructure deployment successful"
          Write-Host "✅ Authentication and routing working as expected"
        } elseif ($successCount -gt ($totalCount * 0.8)) {
          Write-Host "✅ Most API endpoints are working correctly"
          Write-Host "⚠️ Minor issues detected, but core functionality operational"
        } elseif ($successCount -gt 0) {
          Write-Host "⚠️ Some API endpoints are working, but significant issues detected"
        } else {
          Write-Host "❌ No API endpoints are responding - deployment may have failed"
        }
        
        # Set pipeline variable for downstream tasks
        Write-Host "##vso[task.setvariable variable=ApiTestsPassed]$($successCount -gt 0)"

  - task: AzureCLI@2
    displayName: 'Test Static Web App'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing Static Web App"

        $RG_NAME  = "pokedata-${{ parameters.environment }}-rg"
        $SWA_NAME = "pokedata-swa-${{ parameters.environment }}"

        az staticwebapp show --name $SWA_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Static Web App '$SWA_NAME' not found." }
        Write-Host "✅ Static Web App '$SWA_NAME' exists"

        $swaHost = (az staticwebapp show --name $SWA_NAME --resource-group $RG_NAME --query defaultHostname -o tsv).Trim()
        Write-Host "URL: https://$swaHost"

        Write-Host "Testing HTTP endpoint..."
        try {
          $resp = Invoke-WebRequest -Uri ("https://$swaHost") -Method Head -MaximumRedirection 5 -TimeoutSec 15
          $code = [int]$resp.StatusCode
          if ($code -eq 200 -or $code -eq 404) {
            Write-Host "✅ Static Web App is accessible (HTTP $code)"
          } else {
            Write-Host "⚠️ Static Web App returned HTTP $code"
          }
        } catch {
          Write-Host ("HTTP request failed: " + $_.Exception.Message)
        }

  - task: AzureCLI@2
    displayName: 'Test API Management'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing API Management"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $APIM_NAME = "pokedata-apim-${{ parameters.environment }}"

        az apim show --name $APIM_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "API Management '$APIM_NAME' not found." }
        Write-Host "✅ API Management '$APIM_NAME' exists"

        $GATEWAY_URL = (az apim show --name $APIM_NAME --resource-group $RG_NAME --query gatewayUrl -o tsv).Trim()
        if ($GATEWAY_URL) { Write-Host "Gateway URL: $GATEWAY_URL" }

        $STATE = (az apim show --name $APIM_NAME --resource-group $RG_NAME --query provisioningState -o tsv).Trim()
        if ($STATE -eq 'Succeeded') { Write-Host "✅ API Management is provisioned" } else { Write-Host "⚠️ API Management state: $STATE" }

  - task: AzureCLI@2
    displayName: 'Verify Application Insights'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Verifying Application Insights"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $AI_NAME = "pokedata-func-${{ parameters.environment }}-insights"

        az monitor app-insights component show --app $AI_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Application Insights '$AI_NAME' exists"
          $ikey = (az monitor app-insights component show --app $AI_NAME --resource-group $RG_NAME --query instrumentationKey -o tsv).Trim()
          if ($ikey) { Write-Host "✅ Instrumentation configured" }
        } else {
          Write-Host "⚠️ Application Insights '$AI_NAME' not found (may be optional)"
        }

  - task: PowerShell@2
    displayName: 'Test Summary'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Write-Host "## Infrastructure Test Summary"
        Write-Host ""
        Write-Host "✅ All critical infrastructure components verified"
        Write-Host "✅ Resources are accessible and in expected state"
        Write-Host ""
        Write-Host "Environment: ${{ parameters.environment }}"
        Write-Host ("Test completed at: " + (Get-Date -Format "yyyy-MM-dd HH:mm:ss zzz"))

# Template for Post-Deployment Infrastructure Tests (PowerShell)
parameters:
  - name: environment
    type: string

steps:
  - task: AzureCLI@2
    displayName: 'Verify Resource Group'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Verifying Resource Group Deployment"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"

        $exists = az group exists --name $RG_NAME | ForEach-Object { $_.Trim().ToLower() }
        if ($LASTEXITCODE -ne 0) { throw "az group exists failed." }
        if ($exists -ne 'true') { throw "Resource Group '$RG_NAME' not found." }

        Write-Host "✅ Resource Group '$RG_NAME' exists"
        Write-Host ""
        Write-Host "### Resources in Resource Group:"
        az resource list --resource-group $RG_NAME --output table

  - task: AzureCLI@2
    displayName: 'Test Cosmos DB Connectivity'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing Cosmos DB"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $COSMOS_NAME = "pokedata-cosmos-${{ parameters.environment }}"

        az cosmosdb show --name $COSMOS_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Cosmos DB '$COSMOS_NAME' not found in RG '$RG_NAME'." }
        Write-Host "✅ Cosmos DB '$COSMOS_NAME' exists"

        $ENDPOINT = (az cosmosdb show --name $COSMOS_NAME --resource-group $RG_NAME --query documentEndpoint -o tsv).Trim()
        Write-Host "Endpoint: $ENDPOINT"

        az cosmosdb sql database show --account-name $COSMOS_NAME --name "pokemon-cards" --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Database 'pokemon-cards' exists"
        } else {
          Write-Host "⚠️ Database 'pokemon-cards' not found"
        }

  - task: AzureCLI@2
    displayName: 'Test Function App'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing Function App"

        $RG_NAME  = "pokedata-${{ parameters.environment }}-rg"
        $FUNC_NAME = "pokedata-func-${{ parameters.environment }}"

        az functionapp show --name $FUNC_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Function App '$FUNC_NAME' not found." }
        Write-Host "✅ Function App '$FUNC_NAME' exists"

        $funcHost = (az functionapp show --name $FUNC_NAME --resource-group $RG_NAME --query defaultHostName -o tsv).Trim()
        Write-Host "URL: https://$funcHost"

        $state = (az functionapp show --name $FUNC_NAME --resource-group $RG_NAME --query state -o tsv).Trim()
        if ($state -eq 'Running') { Write-Host "✅ Function App is running" } else { Write-Host "⚠️ Function App state: $state" }

        Write-Host "Testing HTTP endpoint..."
        try {
          $resp = Invoke-WebRequest -Uri ("https://$funcHost") -Method Head -MaximumRedirection 5 -TimeoutSec 15
          Write-Host ("HTTP Status: " + [int]$resp.StatusCode)
        } catch {
          Write-Host ("HTTP request failed: " + $_.Exception.Message)
        }

  - task: AzureCLI@2
    displayName: 'Test Static Web App'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing Static Web App"

        $RG_NAME  = "pokedata-${{ parameters.environment }}-rg"
        $SWA_NAME = "pokedata-swa-${{ parameters.environment }}"

        az staticwebapp show --name $SWA_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "Static Web App '$SWA_NAME' not found." }
        Write-Host "✅ Static Web App '$SWA_NAME' exists"

        $swaHost = (az staticwebapp show --name $SWA_NAME --resource-group $RG_NAME --query defaultHostname -o tsv).Trim()
        Write-Host "URL: https://$swaHost"

        Write-Host "Testing HTTP endpoint..."
        try {
          $resp = Invoke-WebRequest -Uri ("https://$swaHost") -Method Head -MaximumRedirection 5 -TimeoutSec 15
          $code = [int]$resp.StatusCode
          if ($code -eq 200 -or $code -eq 404) {
            Write-Host "✅ Static Web App is accessible (HTTP $code)"
          } else {
            Write-Host "⚠️ Static Web App returned HTTP $code"
          }
        } catch {
          Write-Host ("HTTP request failed: " + $_.Exception.Message)
        }

  - task: AzureCLI@2
    displayName: 'Test API Management'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Testing API Management"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $APIM_NAME = "pokedata-apim-${{ parameters.environment }}"

        az apim show --name $APIM_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "API Management '$APIM_NAME' not found." }
        Write-Host "✅ API Management '$APIM_NAME' exists"

        $GATEWAY_URL = (az apim show --name $APIM_NAME --resource-group $RG_NAME --query gatewayUrl -o tsv).Trim()
        if ($GATEWAY_URL) { Write-Host "Gateway URL: $GATEWAY_URL" }

        $STATE = (az apim show --name $APIM_NAME --resource-group $RG_NAME --query provisioningState -o tsv).Trim()
        if ($STATE -eq 'Succeeded') { Write-Host "✅ API Management is provisioned" } else { Write-Host "⚠️ API Management state: $STATE" }

  - task: AzureCLI@2
    displayName: 'Verify Application Insights'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $ErrorActionPreference = 'Stop'
        Write-Host "## Verifying Application Insights"

        $RG_NAME = "pokedata-${{ parameters.environment }}-rg"
        $AI_NAME = "pokedata-func-${{ parameters.environment }}-insights"

        az monitor app-insights component show --app $AI_NAME --resource-group $RG_NAME | Out-Null
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Application Insights '$AI_NAME' exists"
          $ikey = (az monitor app-insights component show --app $AI_NAME --resource-group $RG_NAME --query instrumentationKey -o tsv).Trim()
          if ($ikey) { Write-Host "✅ Instrumentation configured" }
        } else {
          Write-Host "⚠️ Application Insights '$AI_NAME' not found (may be optional)"
        }

  - task: PowerShell@2
    displayName: 'Test Summary'
    inputs:
      targetType: inline
      script: |
        Write-Host "## Infrastructure Test Summary"
        Write-Host ""
        Write-Host "✅ All critical infrastructure components verified"
        Write-Host "✅ Resources are accessible and in expected state"
        Write-Host ""
        Write-Host "Environment: ${{ parameters.environment }}"
        Write-Host ("Test completed at: " + (Get-Date -Format "yyyy-MM-dd HH:mm:ss zzz"))

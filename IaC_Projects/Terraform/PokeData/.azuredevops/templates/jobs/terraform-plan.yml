# ... parameters unchanged ...

steps:
  - task: TerraformInstaller@1
    displayName: 'Install Terraform latest'
    inputs:
      terraformVersion: latest

  - task: TerraformTaskV4@4
    displayName: 'Terraform Init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '${{ parameters.workingDirectory }}'
      backendServiceArm: '$(azureServiceConnection)'
      backendAzureRmResourceGroupName: 'pokedata-terraform-state-rg'
      backendAzureRmStorageAccountName: 'tfstateyul4ts'
      backendAzureRmContainerName: 'tfstate-${{ parameters.environment }}'
      backendAzureRmKey: 'pokedata/${{ parameters.environment }}.tfstate'
    env:
      TF_VAR_repository_token: $(github_token)   # secret var from ADO group/Key Vault

  - task: PowerShell@2
    displayName: 'Validate GitHub PAT mapping'
    env:
      TF_VAR_repository_token: $(github_token)   # from variable group
    inputs:
      targetType: inline
      script: |
        $ErrorActionPreference = 'Stop'
        if (-not $env:TF_VAR_repository_token) { throw "TF_VAR_repository_token is empty" }

        # Universal headers for GitHub REST v3
        $headers = @{
          Authorization = "token $($env:TF_VAR_repository_token)"   # works for classic & fine-grained PATs
          "User-Agent"  = "ado"
          "Accept"      = "application/vnd.github+json"
          "X-GitHub-Api-Version" = "2022-11-28"
        }

        function Fail([string]$msg) { Write-Error $msg; exit 1 }

        # 0) Sanity check: token shape (helps catch accidental blanks/redactions)
        if ($env:TF_VAR_repository_token.Length -lt 20) {
          Fail "PAT looks too short—check variable group value and masking."
        }

        # 1) Validate token itself
        try {
          $me = Invoke-RestMethod -Uri "https://api.github.com/user" -Headers $headers -Method GET
        } catch {
          $status = $_.Exception.Response.StatusCode.Value__
          $body   = ($_ | Select-Object -ExpandProperty ErrorDetails -ErrorAction SilentlyContinue).Message
          if ($status -eq 401) {
            Fail "401 at /user → invalid token or not SSO-enabled for the org. Recreate PAT (repo+workflow) and enable SSO."
          }
          Fail "Token check failed: HTTP $status $body"
        }

        # 2) Repo access + admin permission
        $owner = "Abernaughty"
        $name  = "PokeData"
        $repoApi = "https://api.github.com/repos/$owner/$name"

        try {
          $repo = Invoke-RestMethod -Uri $repoApi -Headers $headers -Method GET
        } catch {
          $status = $_.Exception.Response.StatusCode.Value__
          $body   = ($_ | Select-Object -ExpandProperty ErrorDetails -ErrorAction SilentlyContinue).Message
          if ($status -eq 403) {
            Fail "403 on repo → token lacks repo access (fine-grained not granted to this repo or missing Contents permission)."
          } elseif ($status -eq 404) {
            Fail "404 on repo → repo not visible to token (wrong owner/name or missing access)."
          } elseif ($status -eq 401) {
            Fail "401 on repo → token valid but not SSO-authorized for this org. Enable SSO on the PAT."
          }
          Fail "Repo check failed: HTTP $status $body"
        }

        if (-not $repo.permissions -or -not $repo.permissions.admin) {
          Fail "PAT owner is not admin on $owner/$name (SWA requires admin/owner)."
        }

        # 3) Actions scope check (required for SWA)
        try {
          $wf = Invoke-RestMethod -Uri "$repoApi/actions/workflows" -Headers $headers -Method GET
        } catch {
          $status = $_.Exception.Response.StatusCode.Value__
          if ($status -eq 403) {
            Fail "403 listing workflows → token missing Actions: Read (fine-grained) or workflow scope (classic)."
          }
          Fail "Workflow check failed: HTTP $status"
        }

        Write-Host "OK: PAT is valid, repo access confirmed, admin=true, Actions scope present."
    env:
      TF_VAR_repository_token: $(github_token)   # secret var from ADO group/Key Vault

  - task: TerraformTaskV4@4
    displayName: 'Terraform Plan'
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '${{ parameters.workingDirectory }}'
      # Explicit var-file; detailed-exitcode = 0 (no change) or 2 (changes)
      commandOptions: '-var-file=terraform.tfvars -out=tfplan -input=false -detailed-exitcode'
      environmentServiceNameAzureRM: '$(azureServiceConnection)'
      publishPlanResults: 'tfplan-${{ parameters.environment }}'
    env:
      TF_VAR_repository_token: $(github_token)
    # Let exit code 2 (changes) pass; the task reports nonzero -> don't fail the job
    continueOnError: true

  - task: PowerShell@2
    displayName: 'Generate Plan Summary'
    inputs:
      targetType: inline
      workingDirectory: '${{ parameters.workingDirectory }}'
      script: |
        $ErrorActionPreference = 'Stop'
        $planPath = Join-Path (Get-Location) 'tfplan'
        if (-not (Test-Path $planPath)) { throw "Plan file not found: $planPath" }

        terraform show -no-color $planPath | Out-File -Encoding utf8 'tfplan.txt'
        terraform show -json     $planPath | Out-File -Encoding utf8 'tfplan.json'

        $plan = Get-Content 'tfplan.json' -Raw | ConvertFrom-Json
        $rc = @($plan.resource_changes)
        $creates = @($rc | Where-Object { $_.change.actions -contains 'create' }).Count
        $updates = @($rc | Where-Object { $_.change.actions -contains 'update' -and $_.change.actions -notcontains 'create' -and $_.change.actions -notcontains 'delete' }).Count
        $deletes = @($rc | Where-Object { $_.change.actions -contains 'delete' }).Count
        $top = $rc | Select-Object -First 20 | ForEach-Object { "- $($_.address) : $([string]::Join(',', $_.change.actions))" }

        @"
        ## Terraform Plan Summary for ${{ parameters.environment }}

        **Environment:** ${{ parameters.environment }}
        **Build:** $(Build.BuildNumber)
        **Triggered by:** $(Build.RequestedFor)

        ### Change summary
        - Creates:  $creates
        - Updates:  $updates
        - Deletes:  $deletes

        ### First 20 resource changes
        $($top -join "`n")

        _Full plan attached as artifacts._
        "@ | Out-File -Encoding utf8 'plan-summary.md'

        Write-Host "Wrote plan-summary.md, tfplan.txt, tfplan.json"
    env:
      TF_VAR_repository_token: $(github_token)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform Plan'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/tfplan'
      artifactName: '${{ parameters.artifactName }}'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Plan Output'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/tfplan.txt'
      artifactName: 'plan-output-${{ parameters.environment }}'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Plan JSON'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/tfplan.json'
      artifactName: 'plan-json-${{ parameters.environment }}'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Plan Summary'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/plan-summary.md'
      artifactName: 'plan-summary-${{ parameters.environment }}'
      publishLocation: 'Container'

  - task: GitHubComment@0
    displayName: 'Post Plan to PR'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    inputs:
      gitHubConnection: '$(githubServiceConnection)'
      repositoryName: '$(Build.Repository.Name)'
      comment: |
        ## Terraform Plan Results - ${{ parameters.environment }}
        Build: $(Build.BuildNumber)
        The Terraform plan has been generated and saved.
        [View Artifacts]($(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts)
    continueOnError: true

  - script: |
      echo "✅ Terraform plan completed"
    displayName: 'Plan Complete'

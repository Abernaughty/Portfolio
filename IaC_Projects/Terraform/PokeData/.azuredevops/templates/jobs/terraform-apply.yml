# Template for Terraform Apply
parameters:
  - name: workingDirectory
    type: string
  - name: terraformVersion
    type: string
  - name: environment
    type: string
  - name: artifactName
    type: string

steps:
  - checkout: self
    persistCredentials: true

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Terraform Plan'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '${{ parameters.artifactName }}'
      downloadPath: '$(System.ArtifactsDirectory)'

  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
    inputs:
      terraformVersion: '${{ parameters.terraformVersion }}'

  - task: TerraformTaskV4@4
    displayName: 'Terraform Init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '${{ parameters.workingDirectory }}'
      backendServiceArm: 'Azure-Service-Connection'
      backendAzureRmResourceGroupName: 'tfstate-rg'
      backendAzureRmStorageAccountName: 'tfstateyul4ts'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: 'pokedata/${{ parameters.environment }}.tfstate'

  - script: |
      # Copy the plan file from artifacts to working directory
      cp $(System.ArtifactsDirectory)/${{ parameters.artifactName }}/tfplan ${{ parameters.workingDirectory }}/tfplan
      echo "âœ… Terraform plan file restored"
    displayName: 'Restore Plan File'

  - task: TerraformTaskV4@4
    displayName: 'Terraform Apply'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '${{ parameters.workingDirectory }}'
      commandOptions: 'tfplan'
      environmentServiceNameAzureRM: 'Azure-Service-Connection'

  - script: |
      echo "## Deployment Summary for ${{ parameters.environment }}" > deployment-summary.md
      echo "" >> deployment-summary.md
      echo "**Environment:** ${{ parameters.environment }}" >> deployment-summary.md
      echo "**Build:** $(Build.BuildNumber)" >> deployment-summary.md
      echo "**Deployed by:** $(Build.RequestedFor)" >> deployment-summary.md
      echo "**Deployment Time:** $(date)" >> deployment-summary.md
      echo "" >> deployment-summary.md
      
      # Get outputs
      echo "### Terraform Outputs:" >> deployment-summary.md
      terraform output -json > outputs.json
      terraform output >> deployment-summary.md
      
      echo "" >> deployment-summary.md
      echo "âœ… Infrastructure successfully deployed to ${{ parameters.environment }}" >> deployment-summary.md
      
      cat deployment-summary.md
    displayName: 'Generate Deployment Summary'
    workingDirectory: '${{ parameters.workingDirectory }}'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Deployment Summary'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/deployment-summary.md'
      artifactName: 'deployment-summary-${{ parameters.environment }}'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform Outputs'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/outputs.json'
      artifactName: 'terraform-outputs-${{ parameters.environment }}'
      publishLocation: 'Container'

  - script: |
      # Tag the deployment in git
      git config user.email "azure-pipeline@maber.io"
      git config user.name "Azure Pipeline"
      
      TAG_NAME="${{ parameters.environment }}-$(Build.BuildNumber)"
      git tag -a "$TAG_NAME" -m "Deployed to ${{ parameters.environment }} by $(Build.RequestedFor)"
      
      # Push tag (will fail if no push permissions, that's ok)
      git push origin "$TAG_NAME" || echo "Could not push tag (no permissions)"
      
      echo "âœ… Deployment tagged as: $TAG_NAME"
    displayName: 'Tag Deployment'
    continueOnError: true

  - script: |
      echo "ðŸŽ‰ Deployment to ${{ parameters.environment }} completed successfully!"
      echo ""
      echo "Resources deployed:"
      terraform state list
    displayName: 'Deployment Complete'
    workingDirectory: '${{ parameters.workingDirectory }}'

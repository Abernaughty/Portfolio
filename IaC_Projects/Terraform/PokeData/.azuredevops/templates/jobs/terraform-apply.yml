# Template for Terraform Apply
parameters:
  - name: workingDirectory
    type: string
  - name: terraformVersion
    type: string
  - name: environment
    type: string
  - name: artifactName
    type: string

steps:
  - checkout: self
    persistCredentials: true

  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
    inputs:
      terraformVersion: '${{ parameters.terraformVersion }}'

  # Re-init so provider plugins/backends exist in this fresh job workspace
  - task: TerraformTaskV4@4
    displayName: 'Terraform Init (Apply)'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '${{ parameters.workingDirectory }}'
      backendServiceArm: '$(azureServiceConnection)'
      backendAzureRmResourceGroupName: 'tfstate-rg'
      backendAzureRmStorageAccountName: 'tfstateyul4ts'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: 'pokedata/${{ parameters.environment }}.tfstate'
    env:
      TF_VAR_github_token: $(github_token)   # secret from variable group / Key Vault

  # Pull the saved plan artifact produced in the Plan stage
  - task: DownloadBuildArtifacts@1
    displayName: 'Download Terraform Plan'
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: '${{ parameters.artifactName }}'
      downloadPath: '$(Agent.TempDirectory)'

  # Place tfplan next to the code for a simple relative apply
  - script: |
      set -e
      SRC="$(Agent.TempDirectory)/${{ parameters.artifactName }}/tfplan"
      DST="${{ parameters.workingDirectory }}/tfplan"
      echo "Copying plan: $SRC -> $DST"
      cp "$SRC" "$DST"
      echo "âœ… Terraform plan file restored"
    displayName: 'Restore Plan File'

  # Apply the exact plan reviewed earlier (no -var-file here)
  - task: TerraformTaskV4@4
    displayName: 'Terraform Apply'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '${{ parameters.workingDirectory }}'
      commandOptions: '-input=false -auto-approve tfplan'
      environmentServiceNameAzureRM: '$(azureServiceConnection)'
    env:
      TF_VAR_github_token: $(github_token)

  # Produce a quick, human-readable summary and capture outputs
  - script: |
      echo "## Deployment Summary for ${{ parameters.environment }}" > deployment-summary.md
      echo "" >> deployment-summary.md
      echo "**Environment:** ${{ parameters.environment }}" >> deployment-summary.md
      echo "**Build:** $(Build.BuildNumber)" >> deployment-summary.md
      echo "**Deployed by:** $(Build.RequestedFor)" >> deployment-summary.md
      echo "**Deployment Time:** $(date)" >> deployment-summary.md
      echo "" >> deployment-summary.md
      echo "### Terraform Outputs:" >> deployment-summary.md
      terraform output -json > outputs.json
      terraform output >> deployment-summary.md
      echo "" >> deployment-summary.md
      echo "âœ… Infrastructure successfully deployed to ${{ parameters.environment }}" >> deployment-summary.md
      cat deployment-summary.md
    displayName: 'Generate Deployment Summary'
    workingDirectory: '${{ parameters.workingDirectory }}'
    env:
      TF_VAR_github_token: $(github_token)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Deployment Summary'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/deployment-summary.md'
      artifactName: 'deployment-summary-${{ parameters.environment }}'
      publishLocation: 'Container'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Terraform Outputs'
    inputs:
      pathToPublish: '${{ parameters.workingDirectory }}/outputs.json'
      artifactName: 'terraform-outputs-${{ parameters.environment }}'
      publishLocation: 'Container'

  # Optional git tag â€” keep if you like it
  - script: |
      git config user.email "azure-pipeline@maber.io"
      git config user.name "Azure Pipeline"
      TAG_NAME="${{ parameters.environment }}-$(Build.BuildNumber)"
      git tag -a "$TAG_NAME" -m "Deployed to ${{ parameters.environment }} by $(Build.RequestedFor)"
      git push origin "$TAG_NAME" || echo "Could not push tag (no permissions)"
      echo "âœ… Deployment tagged as: $TAG_NAME"
    displayName: 'Tag Deployment'
    continueOnError: true

  - script: |
      echo "ðŸŽ‰ Deployment to ${{ parameters.environment }} completed successfully!"
      echo ""
      echo "Resources deployed:"
      terraform state list
    displayName: 'Deployment Complete'
    workingDirectory: '${{ parameters.workingDirectory }}'
